// initial extensions to gradle
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.2.2'
        classpath 'org.owasp:dependency-check-gradle:2.1.0'
    }
}

// code
apply plugin: 'java'

// code quality
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

// IDEs
apply plugin: 'eclipse'
apply plugin: 'idea'

// publishing
apply plugin: 'com.cinnober.gradle.semver-git'
apply plugin: 'maven-publish'


sourceCompatibility = 1.8
targetCompatibility = 1.8

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'eu.h2020.symbiote'
            version = project.version
            from components.java
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile('org.apache.jena:jena-core:3.4.0')
    compile('org.apache.jena:jena-querybuilder:3.4.0')
    compile('org.apache.jena:jena-cmds:3.4.0')
    testCompile('junit:junit:4.+')
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:5.+') { changing=true }
}

// code quality below
task generateJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("javadocs")
}

// jacoco configuration section
jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// owasp config
dependencyCheck {
    outputDirectory = file("$rootDir/build/reports/security")
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport)//, 'dependencyCheck')



def ontologyRootDir = "src/main/resources/ontologies/"
def default_config = 
[
    output: "src/main/java",
    flags: ["--nocomments", "--ontology", "--nostrict"],
    package: "eu.h2020.symbiote.semantics.ontology" ,
    header: "%package%\n%imports%\nimport org.apache.commons.lang3.StringUtils;\n"
]

def symbIoTe_declarations = '    public static String getVersionURI() { return getURI() + "/[version]"; }'

def TAG_VERSION = "[version]";
def VERSION = "2.3.0"

def ontology_config = 
[ 
    // symbIoTe internal
    [ input: "core-v[version].ttl", version: VERSION, classname: "CIM", declarations: symbIoTe_declarations ] ,
    [ input: "meta-v[version].ttl", version: VERSION, classname: "MIM", declarations: symbIoTe_declarations ] ,
    [ input: "bim-v[version].ttl", version: VERSION, classname: "BIM", declarations: symbIoTe_declarations ] ,
    [ input: "bim-parametervalues-v[version].ttl", version: VERSION, classname: "BIM_PARAMETER_VALUE", declarations: symbIoTe_declarations ] ,
    [ input: "bim-property-v[version].ttl", version: VERSION, classname: "BIM_PROPERTY", declarations: symbIoTe_declarations ] ,
    [ input: "bim-qu-align-v[version].ttl", version: VERSION, classname: "BIM_QU_ALIGN", declarations: symbIoTe_declarations ] ,
    [ input: "bim-smartmobility-v[version].ttl", version: VERSION, classname: "BIM_MOBILITY", declarations: symbIoTe_declarations ] ,
    [ input: "bim-smartresidence-v[version].ttl", version: VERSION, classname: "BIM_RESIDENCE", declarations: symbIoTe_declarations ] ,
    [ input: "bim-smartstadium-v[version].ttl", version: VERSION, classname: "BIM_STADIUM", declarations: symbIoTe_declarations ] ,
    [ input: "bim-smartyachting-v[version].ttl", version: VERSION, classname: "BIM_YACHTING", declarations: symbIoTe_declarations ] ,
    [ input: "bim-unit-v[version].ttl", version: VERSION, classname: "BIM_UNIT", declarations: symbIoTe_declarations ] ,
    // external
    [ input: "external/qu-rec20.owl", classname: "QU" , header: null, declarations: null] ,
    [ input: "external/wgs84_pos.rdf", classname: "WGS84" ] ,
    // test
    [ input: "../../../test/resources/ontologies/simpleModel.ttl", output: "src/test/java", classname: "SIMPLE_MODEL", declarations: symbIoTe_declarations ] 
]

import static org.apache.tools.ant.taskdefs.condition.Os.*

task generateOntologies {
    doLast {
        ext.encodeForOS = { string ->
            if (isFamily(FAMILY_WINDOWS)) {
                return string.replaceAll('\\\"', '\\\"\\\"')
            }
            return string
        }
        description = 'Generate Ontology Classes'    
        for (config in ontology_config) {
            def temp = []
            temp.add("-i")
            temp.add(ontologyRootDir + (config.input).replace(TAG_VERSION, config.version ?: VERSION))
            temp.add("-o")
            temp.add(config.output ?: default_config.output)
            if (config.classname) {
                temp.add("-n")
                temp.add(config.classname)
            }
            temp.add("--package")
            temp.add(config.package ?: default_config.package)
            temp.addAll(config.flags ?: default_config.flags)
            if (config.header || default_config.header) {
                temp.add("--header")
                temp.add(encodeForOS(config.header ?: default_config.header))
            }
            if (config.declarations || default_config.declarations) {   
                temp.add("--declarations")                
                temp.add(encodeForOS((config.declarations ?: default_config.declarations).replace(TAG_VERSION, config.version ?: VERSION)))
            }
            javaexec {
                classpath sourceSets.main.runtimeClasspath
                main = 'jena.schemagen'
                args = temp
            }
            // replace bad generated code
            def generatedFileDir = (config.output ?: default_config.output) + "/" + (config.package ?: default_config.package).replaceAll("\\.", "/")
            ant.replaceregexp(match:'public static String getURI\\(\\) \\{return NS;\\}', replace:'public static String getURI() {return StringUtils.stripEnd(NS, "#");}', flags:'g', byline:true) {
                fileset(dir: generatedFileDir, includes:  config.classname + ".java")
            }
        }    
    }
}